/*
--------------------------------------------------------
----EFFECTIVE ADDRESS----
--------------------------------------------------------

An effective address is encoded in up to three parts:
1. MOD-R/M BYTE
2. Optional SIB BYTE
3. Optional DISPLACEMENT

------MOD-R/M BYTE------
The MOD-R/M BYTE consists of three fields:
1. The R/M field (3 bits)
2. The REG field (3 bits)
3. The MOD field (2 bits)

The MOD-R/M system can be used to encode a direct register reference rather
than a memory access. This is always done by setting the mod field to 3 and
the r/m field to the register value of the register in question (it must be
a general-purpose register, and the size of the register must already be
implicit in the encoding of the rest of the instruction). In this case, the
SIB byte and displacement field are both absent.

In 32-bit addressing mode (either BITS 16 with a 67 prefix, or BITS 32
with no 67 prefix) the general rules (again, there are exceptions) for mod
and r/m are:

The mod field gives the length of the displacement field: 0 means no
displacement, 1 means one byte, and 2 means four bytes.

If only one register is to be added to the displacement, and it is not
ESP, the r/m field gives its register value, and the SIB byte is absent.
If the r/m field is 4 (which would encode ESP), the SIB byte is present
and gives the combination and scaling of registers to be added to the
displacement. If the SIB byte is present, it describes the combination of
registers (an optional base register, and an optional index register scaled
by multiplication by 1, 2, 4 or 8) to be added to the displacement. The SIB
byte is divided into the scale field, in the top two bits, the index field
in the next three, and the base field in the bottom three. The general
rules are:

The base field encodes the register value of the base register.
- The index field encodes the register value of the index register, unless
it is 4, in which case no index register is used (so ESP cannot be used
as an index register).
- The scale field encodes the multiplier by which the index register is
scaled before adding it to the base and displacement: 0 encodes a multiplier
of 1, 1 encodes 2, 2 encodes 4 and 3 encodes 8.
- The exceptions to the 32-bit encoding rules are:
+ If mod is 0 and r/m is 5, the effective address encoded is not [EBP]
as the above rules would suggest, but instead [disp32]: the displacement
field is present and is four bytes long, and no registers are added to
the displacement.
+ If mod is 0, r/m is 4 (meaning the SIB byte is present) and base is 4,
the effective address encoded is not [EBP+index] as the above rules would
suggest, but instead [disp32+index]: the displacement field is present
and is four bytes long, and there is no base register (but the index
register is still processed in the normal way).
*/

/*
-----slash followed by digit----
A slash followed by a digit, such as /2, indicates that one of the operands to
the instruction is a memory address or register (denoted mem or r/m, with an
optional size). This is to be encoded as an effective address, with a ModR/M
byte, an optional SIB byte, and an optional displacement, and the spare
(register) field of the ModR/M byte should be the digit given (which will be
from 0 to 7, so it fits in three bits). The encoding of effective addresses is
given in section B.2.5

-----slash followed by an r----
The code /r combines the above two: it indicates that one of the operands is a
memory address or r/m, and another is a register, and that an effective address
should be generated with the spare (register) field in the ModR/M byte being
equal to the `register value' of the register operand. The encoding of effective
addresses is given in section B.2.5; register values are given in section B.2.1.
*/